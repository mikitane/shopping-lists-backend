frameworkVersion: '2.18.0'

org: mikitane
app: shopping-lists-backend
service: shopping-lists

provider:
  name: aws
  region: eu-west-1
  runtime: nodejs12.x
  apiGateway:
    minimumCompressionSize: 1024
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
    MAIN_TABLE: db-${opt:stage}-MainTable

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource:
        - !ImportValue ${self:provider.environment.MAIN_TABLE}-Arn
    - Effect: 'Allow'
      Action:
        - "sns:Publish"
      Resource:
        - !Ref ShoppingListCreatedTopic


custom:
  webpack:
    webpackConfig: './webpack.config.js'
    includeModules: true
  seed:
    incremental:
      enabled: true
  region: ${opt:region, self:provider.region}
  mainUserPoolArn: auth-${opt:stage}-MainUserPool-Arn
  shoppingListAnalyticsOueueArn: analytics-${opt:stage}-shoppingListAnalyticsOueue-Arn
  shoppingListAnalyticsQueueUrl: analytics-${opt:stage}-shoppingListAnalyticsQueue-Url

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-seed

functions:
  createShoppingList:
    handler: 'src/functions/createShoppingList.createShoppingList'
    environment:
      ShoppingListCreatedTopicArn: !Ref ShoppingListCreatedTopic
    events:
      - http:
          method: post
          path: shopping-list
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !ImportValue ${self:custom.mainUserPoolArn}

  getShoppingList:
    handler: 'src/functions/getShoppingList.getShoppingList'
    events:
      - http:
          method: get
          path: shopping-list/{id}
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !ImportValue ${self:custom.mainUserPoolArn}

  getShoppingList:
    handler: 'src/functions/getShoppingLists.getShoppingLists'
    events:
      - http:
          method: get
          path: shopping-list
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !ImportValue ${self:custom.mainUserPoolArn}

  updateShoppingList:
    handler: 'src/functions/updateShoppingList.updateShoppingList'
    events:
      - http:
          method: put
          path: shopping-list/{id}
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !ImportValue ${self:custom.mainUserPoolArn}

resources:
  Resources:
    ShoppingListCreatedTopic:
      Type: 'AWS::SNS::Topic'

    # TODO: Maybe move these to analytics serverless.yml?
    ShoppingListCreatedAnalyticsSubscription:
      Type: 'AWS::SNS::Subscription'
      Properties:
        TopicArn: !Ref ShoppingListCreatedTopic
        Endpoint: !ImportValue ${self:custom.shoppingListAnalyticsOueueArn}
        Protocol: sqs
        RawMessageDelivery: 'true'

    ShoppingListCreatedAnalyticsQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "allow-sns-messages"
              Effect: Allow
              Principal: "*"
              Resource: !ImportValue ${self:custom.shoppingListAnalyticsOueueArn}
              Action: "SQS:SendMessage"
              Condition:
                ArnEquals:
                  "aws:SourceArn": !Ref ShoppingListCreatedTopic
        Queues:
          - !ImportValue ${self:custom.shoppingListAnalyticsQueueUrl}
